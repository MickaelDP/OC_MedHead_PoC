<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
        <intProp name="ThreadGroup.num_threads">1000</intProp>
        <intProp name="ThreadGroup.ramp_time">10</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">10</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import java.util.UUID;
import java.util.Random;

// Générer un UUID unique pour chaque requête
String patientId = UUID.randomUUID().toString();

// Liste des spécialités possibles
String[] specialites = {&quot;Cardiologie&quot;, &quot;Endodontie&quot;, &quot;Médecine d&apos;urgence&quot;, &quot;Pédiatrie&quot;, &quot;Hématologie&quot;};

// Randomiser une spécialité
Random random = new Random();
String specialite = specialites[random.nextInt(specialites.length)];

// Ajouter l&apos;UUID et la spécialité dans les variables JMeter
vars.put(&quot;patientId&quot;, patientId);
vars.put(&quot;specialite&quot;, specialite);</stringProp>
          <stringProp name="TestPlan.comments">Generation d&apos;id intervention</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
          <stringProp name="TestPlan.comments">/api/patients/process</stringProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">8443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/api/patients/process</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${patientId}&quot;,&#xd;
  &quot;specialite&quot;: &quot;Cardiologie&quot;,&#xd;
  &quot;responsable&quot;: &quot;Frank Estein&quot;,&#xd;
  &quot;qualite&quot;: &quot;Dr.&quot;,&#xd;
  &quot;latitude&quot;: 0,&#xd;
  &quot;longitude&quot;: 0&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
            <stringProp name="DurationAssertion.duration">200</stringProp>
          </DurationAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">try {
    // Redirige System.out vers un fichier en mode écrasement
    System.setOut(new java.io.PrintStream(new java.io.FileOutputStream(&quot;E:\\apache-jmeter-5.6.3\\log\\output_results.txt&quot;, false)));

    // Récupérer la réponse HTTP en tant que chaîne brute
    String response = prev.getResponseDataAsString();

    // Initialiser ou récupérer les variables globales
    if (props.get(&quot;successfulResponses&quot;) == null) {
        props.put(&quot;successfulResponses&quot;, &quot;0&quot;);
        props.put(&quot;faillureResponses&quot;, &quot;0&quot;);
        props.put(&quot;totalDelai&quot;, &quot;0&quot;);
    }

    // Récupérer les valeurs actuelles
    int successfulResponses = Integer.parseInt(props.get(&quot;successfulResponses&quot;));
    int faillureResponses = Integer.parseInt(props.get(&quot;faillureResponses&quot;));
    long totalDelai = Long.parseLong(props.get(&quot;totalDelai&quot;));

    // Analyser la réponse
    if (response != null &amp;&amp; !response.isEmpty()) {
        if (response.contains(&quot;\&quot;specialiteDisponible\&quot;:true&quot;)) {
            successfulResponses++;
        } else {
            faillureResponses++;
        }

        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(&quot;\&quot;delai\&quot;:\\s*(\\d+)&quot;);
        java.util.regex.Matcher matcher = pattern.matcher(response);
        if (matcher.find()) {
            long delai = Long.parseLong(matcher.group(1));
            totalDelai += delai;
        }
    }

    // Mettre à jour les compteurs
    props.put(&quot;successfulResponses&quot;, String.valueOf(successfulResponses));
    props.put(&quot;faillureResponses&quot;, String.valueOf(faillureResponses));
    props.put(&quot;totalDelai&quot;, String.valueOf(totalDelai));

    int totalRequests = successfulResponses + faillureResponses;
    double successRate = (double) successfulResponses / totalRequests * 100;
    double averageDelai = (double) totalDelai / totalRequests;

    // Écrire les résultats dans le fichier (remplace tout le contenu)
    System.out.println(&quot;================================ Résultats du test ==================================&quot;);
    System.out.println(&quot;=                           Taux de succès : &quot; + new java.text.DecimalFormat(&quot;#.##&quot;).format(successRate) + &quot;%                                 =&quot;);
    System.out.println(&quot;=                Délai moyen (pour les réussites) : &quot; + new java.text.DecimalFormat(&quot;#.##&quot;).format(averageDelai) + &quot; min                         =&quot;);

    if (successRate &gt;= 90 &amp;&amp; averageDelai &lt;= 12) {
        System.out.println(&quot;=                         Succès : Les KPI sont atteints !                          =&quot;);
    } else {
        System.out.println(&quot;=                         Échec : Les KPI ne sont pas atteints !                    =&quot;);
    }
    System.out.println(&quot;=====================================================================================&quot;);

} catch (java.io.IOException e) {
    log.error(&quot;Erreur lors de l&apos;écriture dans le fichier : &quot; + e.getMessage());
}

</stringProp>
            <stringProp name="scriptLanguage">java</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
